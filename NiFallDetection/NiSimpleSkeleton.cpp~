/****************************************************************************
*                                                                           *
*  OpenNI 1.x Alpha                                                         *
*  Copyright (C) 2011 PrimeSense Ltd.                                       *
*                                                                           *
*  This file is part of OpenNI.                                             *
*                                                                           *
*  OpenNI is free software: you can redistribute it and/or modify           *
*  it under the terms of the GNU Lesser General Public License as published *
*  by the Free Software Foundation, either version 3 of the License, or     *
*  (at your option) any later version.                                      *
*                                                                           *
*  OpenNI is distributed in the hope that it will be useful,                *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             *
*  GNU Lesser General Public License for more details.                      *
*                                                                           *
*  You should have received a copy of the GNU Lesser General Public License *
*  along with OpenNI. If not, see <http://www.gnu.org/licenses/>.           *
*                                                                           *
****************************************************************************/
//---------------------------------------------------------------------------
// Includes
//---------------------------------------------------------------------------
#include <XnCppWrapper.h>
#include <sys/time.h>
#include <math.h> 

//---------------------------------------------------------------------------
// Defines
//---------------------------------------------------------------------------
#define SAMPLE_XML_PATH "../../Config/SamplesConfig.xml"
#define SAMPLE_XML_PATH_LOCAL "SamplesConfig.xml"

//---------------------------------------------------------------------------
// Globals
//---------------------------------------------------------------------------
xn::Context g_Context;
xn::ScriptNode g_scriptNode;
xn::DepthGenerator g_DepthGenerator;
xn::UserGenerator g_UserGenerator;

XnBool g_bNeedPose = FALSE;
XnChar g_strPose[20] = "";

#define MAX_NUM_USERS 15


//---------------------------------------------------------------------------
//new globsls valors ----falling 
//---------------------------------------------------------------------------
#define NUM_JOINTS 22
#define MAX_POSITIVE 99999
#define MIN_NEGATIVE -99999




double Xmax = MIN_NEGATIVE;
double Xmin = MAX_POSITIVE;
double Ymax = MIN_NEGATIVE;
double Ymin = MAX_POSITIVE;
double Zmax = MIN_NEGATIVE;
double Zmin = MAX_POSITIVE;
    
double X_table[NUM_JOINTS];
double Y_table[NUM_JOINTS];
double Z_table[NUM_JOINTS];

double width_X;
double height_Y;
double depth_Z;

double old_width_X;
double old_height_Y;
double old_depth_Z;

double old_WD;
double WD;

double v_H;
double v_WD;

struct timeval timeNew, timeOld;

//-------------------------------------------//
bool startDectFalling=false;

#define TvH 1.18
#define TvWD 1.20
#define TiH 0.1
#define falling 8
#define inactivity 10

int a=0, b=0;
bool activityDetection=false;
bool inactivityDetection=false;
bool fallDetected=false;


//---------------------------------------------------------------------------
// Code
//---------------------------------------------------------------------------

//file cofig
XnBool fileExists(const char *fn)
{
	XnBool exists;
	xnOSDoesFileExist(fn, &exists);
	return exists;
}

// Callback: New user was detected
void XN_CALLBACK_TYPE User_NewUser(xn::UserGenerator& /*generator*/, XnUserID nId, void* /*pCookie*/)
{
    XnUInt32 epochTime = 0;
    xnOSGetEpochTime(&epochTime);
    printf("%d New User %d\n", epochTime, nId);
    // New user found
    if (g_bNeedPose)
    {
        g_UserGenerator.GetPoseDetectionCap().StartPoseDetection(g_strPose, nId);
    }
    else
    {
        g_UserGenerator.GetSkeletonCap().RequestCalibration(nId, TRUE);
    }
}
// Callback: An existing user was lost
void XN_CALLBACK_TYPE User_LostUser(xn::UserGenerator& /*generator*/, XnUserID nId, void* /*pCookie*/)
{
    XnUInt32 epochTime = 0;
    xnOSGetEpochTime(&epochTime);
    printf("%d Lost user %d\n", epochTime, nId);	
}
// Callback: Detected a pose
void XN_CALLBACK_TYPE UserPose_PoseDetected(xn::PoseDetectionCapability& /*capability*/, const XnChar* strPose, XnUserID nId, void* /*pCookie*/)
{
    XnUInt32 epochTime = 0;
    xnOSGetEpochTime(&epochTime);
    printf("%d Pose %s detected for user %d\n", epochTime, strPose, nId);
    g_UserGenerator.GetPoseDetectionCap().StopPoseDetection(nId);
    g_UserGenerator.GetSkeletonCap().RequestCalibration(nId, TRUE);
}
// Callback: Started calibration
void XN_CALLBACK_TYPE UserCalibration_CalibrationStart(xn::SkeletonCapability& /*capability*/, XnUserID nId, void* /*pCookie*/)
{
    XnUInt32 epochTime = 0;
    xnOSGetEpochTime(&epochTime);
    printf("%d Calibration started for user %d\n", epochTime, nId);
}

void XN_CALLBACK_TYPE UserCalibration_CalibrationComplete(xn::SkeletonCapability& /*capability*/, XnUserID nId, XnCalibrationStatus eStatus, void* /*pCookie*/)
{
    XnUInt32 epochTime = 0;
    xnOSGetEpochTime(&epochTime);
    if (eStatus == XN_CALIBRATION_STATUS_OK)
    {
        // Calibration succeeded
        printf("%d Calibration complete, start tracking user %d\n", epochTime, nId);		
        g_UserGenerator.GetSkeletonCap().StartTracking(nId);
    }
    else
    {
        // Calibration failed
        printf("%d Calibration failed for user %d\n", epochTime, nId);
        if(eStatus==XN_CALIBRATION_STATUS_MANUAL_ABORT)
        {
            printf("Manual abort occured, stop attempting to calibrate!");
            return;
        }
        if (g_bNeedPose)
        {
            g_UserGenerator.GetPoseDetectionCap().StartPoseDetection(g_strPose, nId);
        }
        else
        {
            g_UserGenerator.GetSkeletonCap().RequestCalibration(nId, TRUE);
        }
    }
}


#define CHECK_RC(nRetVal, what)					    \
    if (nRetVal != XN_STATUS_OK)				    \
{								    \
    printf("%s failed: %s\n", what, xnGetStatusString(nRetVal));    \
    return nRetVal;						    \
}



//*************************************************************************

//fall detection 

//*************************************************************************

void getJointsInfo(XnUserID player, XnSkeletonJoint eJoint, int& rIndex){
     
       if (!g_UserGenerator.GetSkeletonCap().IsTracking(player))
	{
		printf("not tracked!\n");
		return;
	}

	if (!g_UserGenerator.GetSkeletonCap().IsJointActive(eJoint))
	{
		return;
	}
    
    
    XnSkeletonJointTransformation joint;

    g_UserGenerator.GetSkeletonCap().GetSkeletonJoint(player, eJoint, joint);

	if (joint.position.fConfidence < 0.5)
	{
           printf("This joint got error, we ignore this joint!!!!!\n");
           if(rIndex < (NUM_JOINTS-1))rIndex++;
           return;
	}

         X_table[rIndex] = joint.position.position.X;
         Y_table[rIndex] = joint.position.position.Y;
         Z_table[rIndex] = joint.position.position.Z;
         
       //  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! X: %6.2f     Y: %6.2f   Z :%6.2f  \n", X_table[rIndex],Y_table[rIndex],Z_table[rIndex]);    
         
         if(rIndex < (NUM_JOINTS-1))rIndex++;
     
         if(rIndex==(NUM_JOINTS-1)) rIndex=0;
  }


void get_XYZ(){

    int j;
             //find X/Y/Z min/max
            for(j=0; j < NUM_JOINTS ; j++){
                if(X_table[j] > Xmax) Xmax=X_table[j];
                if(X_table[j] < Xmin) Xmin=X_table[j];
                
                if(Y_table[j] > Ymax) Ymax=Y_table[j];
                if(Y_table[j] < Ymin) Ymin=Y_table[j];
                
                if(Z_table[j] > Zmax) Zmax=Z_table[j];
                if((Z_table[j]!=0) && (Z_table[j] < Zmin)) Zmin=Z_table[j];
                  
               //  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! X_valor: %6.2f \n", Z_table[j]);
                 
               //  printf ("max X is : %6.2f !!!\n", Xmax);
             }
            
             printf ("max X is : %6.2f !!!\n", Xmax);
             printf ("min X is : %6.2f !!!\n", Xmin);
             printf ("max Y is : %6.2f !!!\n", Ymax);
             printf ("min Y is : %6.2f !!!\n", Ymin);
             printf ("max Z is : %6.2f !!!\n", Zmax);
             printf ("min Z is : %6.2f !!!\n", Zmin);
             
             //+old
               old_width_X=width_X;
               old_height_Y=height_Y;
               old_depth_Z= depth_Z;
               
             //new  
                width_X = abs(Xmin - Xmax);
                height_Y = abs(Ymin - Ymax);
                depth_Z = abs(Zmin - Zmax);
              
             printf ("width X is : %6.2f !!!\n", width_X);  
             printf ("height Y is : %6.2f !!!\n", height_Y);
             printf ("depth Z is : %6.2f !!!\n", depth_Z);
             
             //+old
             old_WD=WD;
             WD= sqrt(depth_Z*depth_Z + width_X*width_X);
             
             
             
             
            //*****get current system time****
            timeOld=timeNew;
           // printf("old  time :%d\n" , (unsigned int)(timeOld.tv_sec*1000000 + timeOld.tv_usec));
             
            gettimeofday(&timeNew, NULL);
            //printf("new  time :%d\n" , (unsigned int)(timeNew.tv_sec*1000000 + timeNew.tv_usec));
       
             // printf ("Tn - To : %f s\n "  , ((timeNew.tv_sec*1000000 + timeNew.tv_usec)-(timeOld.tv_sec*1000000 + timeOld.tv_usec)));
             
            Xmax = MIN_NEGATIVE;      
            Xmin = MAX_POSITIVE;
            Ymax = MIN_NEGATIVE;
            Ymin = MAX_POSITIVE;
            Zmax = MIN_NEGATIVE;
            Zmin = MAX_POSITIVE;



}



void detectFalling(){
    
    printf ("old WD is : %6.2f !!!\n", old_WD);  
    printf ("new WD is : %6.2f !!!\n", WD);  
    printf ("old H is : %6.2f !!!\n", old_height_Y);
    printf (" H is : %6.2f !!!\n", height_Y);
    
    printf ("Tn - To : %f us\n "  , ((timeNew.tv_sec*1000000 + timeNew.tv_usec)-(timeOld.tv_sec*1000000 + timeOld.tv_usec)));
   //printf ("Tn - To : %f s\n "  , (((timeNew.tv_sec*1000000 + timeNew.tv_usec)-(timeOld.tv_sec*1000000 + timeOld.tv_usec))/1000000));
    
    
    v_H=((height_Y - old_height_Y)/((timeNew.tv_sec*1000000 + timeNew.tv_usec)-(timeOld.tv_sec*1000000 + timeOld.tv_usec)))*1000;
    printf ("v_H is : %6.2f m/s!!!\n", v_H);
    
    v_WD=((WD - old_WD)/((timeNew.tv_sec*1000000 + timeNew.tv_usec)-(timeOld.tv_sec*1000000 + timeOld.tv_usec)))*1000;
    printf ("v_WD is : %6.2f m/s!!!\n", v_WD);
    
   
    
    
    /********fall detection algorithm *************/
    if ((abs(v_H) > TvH) && (v_WD > TvWD)){
        if (a==falling){
            activityDetection=true;
            printf("activityDetection");
        }
        a++;
    }
    if ((activityDetection==true)&& (abs(v_H)< TiH)){
        if(b==inactivity){
            inactivityDetection=true;
            fallDetected=true;
            
             printf("inactivityDetection");
             printf("fallDetected");
        }
        b++;
    }
    
      printf("conter a : %d\n", a);
      printf("conter b : %d\n", b);
    
}




int main()
{
    XnStatus nRetVal = XN_STATUS_OK;
    xn::EnumerationErrors errors;
    
    //charge xml config file 
    const char *fn = NULL;
    if    (fileExists(SAMPLE_XML_PATH)) fn = SAMPLE_XML_PATH;
    else if (fileExists(SAMPLE_XML_PATH_LOCAL)) fn = SAMPLE_XML_PATH_LOCAL;
    else {
        printf("Could not find '%s' nor '%s'. Aborting.\n" , SAMPLE_XML_PATH, SAMPLE_XML_PATH_LOCAL);
        return XN_STATUS_ERROR;
    }
    printf("Reading config from: '%s'\n", fn);

    //read info from xml file
    nRetVal = g_Context.InitFromXmlFile(fn, g_scriptNode, &errors);
    if (nRetVal == XN_STATUS_NO_NODE_PRESENT)
    {
        XnChar strError[1024];
        errors.ToString(strError, 1024);
        printf("%s\n", strError);
        return (nRetVal);
    }
    else if (nRetVal != XN_STATUS_OK)
    {
        printf("Open failed: %s\n", xnGetStatusString(nRetVal));
        return (nRetVal);
    }
    
    //find node depth
    nRetVal = g_Context.FindExistingNode(XN_NODE_TYPE_DEPTH, g_DepthGenerator);
    CHECK_RC(nRetVal,"No depth");

    //find node user
    nRetVal = g_Context.FindExistingNode(XN_NODE_TYPE_USER, g_UserGenerator);
    if (nRetVal != XN_STATUS_OK)
    {
        nRetVal = g_UserGenerator.Create(g_Context);
        CHECK_RC(nRetVal, "Find user generator");
    }


    //create user
    XnCallbackHandle hUserCallbacks, hCalibrationStart, hCalibrationComplete, hPoseDetected;
    if (!g_UserGenerator.IsCapabilitySupported(XN_CAPABILITY_SKELETON))
    {
        printf("Supplied user generator doesn't support skeleton\n");
        return 1;
    }
    nRetVal = g_UserGenerator.RegisterUserCallbacks(User_NewUser, User_LostUser, NULL, hUserCallbacks);
    CHECK_RC(nRetVal, "Register to user callbacks");
    nRetVal = g_UserGenerator.GetSkeletonCap().RegisterToCalibrationStart(UserCalibration_CalibrationStart, NULL, hCalibrationStart);
    CHECK_RC(nRetVal, "Register to calibration start");
    nRetVal = g_UserGenerator.GetSkeletonCap().RegisterToCalibrationComplete(UserCalibration_CalibrationComplete, NULL, hCalibrationComplete);
    CHECK_RC(nRetVal, "Register to calibration complete");

    if (g_UserGenerator.GetSkeletonCap().NeedPoseForCalibration())
    {
        g_bNeedPose = TRUE;
        if (!g_UserGenerator.IsCapabilitySupported(XN_CAPABILITY_POSE_DETECTION))
        {
            printf("Pose required, but not supported\n");
            return 1;
        }
        nRetVal = g_UserGenerator.GetPoseDetectionCap().RegisterToPoseDetected(UserPose_PoseDetected, NULL, hPoseDetected);
        CHECK_RC(nRetVal, "Register to Pose Detected");
        g_UserGenerator.GetSkeletonCap().GetCalibrationPose(g_strPose);
    }

    g_UserGenerator.GetSkeletonCap().SetSkeletonProfile(XN_SKEL_PROFILE_ALL);

    nRetVal = g_Context.StartGeneratingAll();
    CHECK_RC(nRetVal, "StartGenerating");
    

//************finish preconfiguration************//    
    XnUserID aUsers[MAX_NUM_USERS];
    XnUInt16 nUsers;
      
    
    int j;
    int index=0;
    
    
    
    printf("Starting to run\n");
    //if new user found
    if(g_bNeedPose)
    {
        printf("Assume calibration pose\n");
    }
    
    //if no keyboard hit
	while (!xnOSWasKeyboardHit())
    {
        g_Context.WaitOneUpdateAll(g_UserGenerator);
        // print the torso information for the first user already tracking
        nUsers=MAX_NUM_USERS;
        //get user , aUsers=one user detected , nUsers= number of users
        g_UserGenerator.GetUsers(aUsers, nUsers);
        
        
        for(XnUInt16 i=0; i<nUsers; i++)
        {
            if(g_UserGenerator.GetSkeletonCap().IsTracking(aUsers[i])==FALSE)
                continue;

           //1-user 2-enum of available joint
           /* 
            g_UserGenerator.GetSkeletonCap().GetSkeletonJoint(aUsers[i],XN_SKEL_TORSO,torsoJoint);
                printf("user %d: torso at (%6.2f,%6.2f,%6.2f)\n",aUsers[i],
                                                                torsoJoint.position.position.X,
                                                                torsoJoint.position.position.Y,
                                                                torsoJoint.position.position.Z);
            */
            //get 22 joints' information 
            getJointsInfo(aUsers[i],XN_SKEL_HEAD,index);
            getJointsInfo(aUsers[i],XN_SKEL_NECK,index);
            getJointsInfo(aUsers[i],XN_SKEL_TORSO,index);
            getJointsInfo(aUsers[i],XN_SKEL_WAIST,index);
             
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_COLLAR,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_SHOULDER,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_ELBOW,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_WRIST,index); 
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_HAND,index);
                   
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_COLLAR,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_SHOULDER,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_ELBOW,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_WRIST,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_HAND,index);
            
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_HIP,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_KNEE,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_ANKLE,index);
            getJointsInfo(aUsers[i],XN_SKEL_LEFT_FOOT,index);
            
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_HIP,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_KNEE,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_ANKLE,index);
            getJointsInfo(aUsers[i],XN_SKEL_RIGHT_FOOT,index);
            
              
            printf("Get all joints' positions!!!!!\n");
           // printf("index: %d\n", index);
             
            //calcul xyz, time , velocity
            get_XYZ();
           
            //dectect fall
            detectFalling();
            
            if (fallDetected==true){
                printf("***********falling detected!!!!**********************");
                exit(0);
            }
            
           //sleep 0.1s 
            //usleep(100000);
            
        }
        
    }
    g_scriptNode.Release();
    g_DepthGenerator.Release();
    g_UserGenerator.Release();
    g_Context.Release();

}
